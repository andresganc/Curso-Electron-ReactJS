
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ELECTRON Y REACT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
ELECTRON Y REACT
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ELECTRON Y REACT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

======================================================================================
Configuracion del proyecto
======================================================================================


Documentacion: https://www.freecodecamp.org/news/building-an-electron-application-with-create-react-app-97945861647c/


1. ejecutar create-react-app para generar una aplicación React básica

    $ create-react-app mi-proyecto

2. correr npm install --save-dev electron

    $ npm install --save-dev electron

3. agregar main.jsdesde electron-quick-start (lo cambiaremos de nombre electron-starter.js, para mayor claridad)

4. modificar la llamada a mainWindow.loadURL (in electron-starter.js) para usar localhost:3000(webpack-dev-server)

    // and load the index.html of the app.
    //mainWindow.loadFile('index.html')

    // Carga para React en http://localhost:3000
    mainWindow.loadFile("http://localhost:3000");

5. agregar una entrada principal package.jsonparaelectron-starter.js

6. agregar un objetivo de ejecución para iniciar Electron package.json

7. npm start seguido por npm run electron



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
CODIGO: electron-starter.js
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const electron = require('electron');
// Module to control application life.
const app = electron.app;
// Module to create native browser window.
const BrowserWindow = electron.BrowserWindow;

const path = require('path');
const url = require('url');

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow;

function createWindow() {
    // Create the browser window.
    mainWindow = new BrowserWindow({width: 800, height: 600});

    // and load the index.html of the app.
    mainWindow.loadURL('http://localhost:3000');

    // Open the DevTools.
    mainWindow.webContents.openDevTools();

    // Emitted when the window is closed.
    mainWindow.on('closed', function () {
        // Dereference the window object, usually you would store windows
        // in an array if your app supports multi windows, this is the time
        // when you should delete the corresponding element.
        mainWindow = null
    })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', function () {
    // On OS X it is common for applications and their menu bar
    // to stay active until the user quits explicitly with Cmd + Q
    if (process.platform !== 'darwin') {
        app.quit()
    }
});

app.on('activate', function () {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (mainWindow === null) {
        createWindow()
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
CODIGO: package.json
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

{
  "name": "electron-with-create-react-app",
  "version": "0.1.0",
  "private": true,
  "devDependencies": {
    "electron": "^1.4.14",
    "react-scripts": "0.8.5"
  },
  "dependencies": {
    "react": "^15.4.2",
    "react-dom": "^15.4.2"
  },
  "main": "src/electron-starter.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject",
    "electron": "electron ."
  }
}